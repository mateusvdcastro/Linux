HTTP é um protocolo que define as regras de comunicação entre cliente e servidor na internet.
Quando usamos HTTP, os dados são enviados em texto puro. O que pode ser perigoso, já que assim deixamos os dados abertos para intermediários.
Quando precisamos informar nossos dados a algum servidor, queremos ter certeza que este servidor realmente representa a entidade em questão. 
Queremos confiar em quem estamos fornecendo nossos dados! Um certificado digital prova uma identidade para um site, onde temos informações 
sobre o seu domínio e a data de expiração desse certificado. Além disso, o certificado ainda guarda a chave pública que é utilizada para criptografar 
(cifrar) os dados que são trafegados entre cliente e servidor.
Uma autoridade certificadora (CA - Certificate Authority) é um órgão que garante ao navegador e ao usuário que a identidade de um servidor 
(por exemplo o servidor da Alura) é realmente válida. Portanto, podemos trocar informações com este sem riscos!
Aprendemos no vídeo que o HTTPS usa uma chave pública e uma chave privada. As chaves estão ligadas matematicamente, o que foi cifrado pela chave pública 
só pode ser decifrado pela chave privada. Isso garante que os dados cifrados pelo navegador (chave pública) só podem ser lidos pelo servidor (chave privada). 
Como temos duas chaves diferentes envolvidas, esse método de criptografia é chamado de criptografia assimétrica. No entanto, a criptografia assimétrica tem um 
problema, ela é lenta. Por outro lado, temos a criptografia simétrica, que usa a mesma chave para cifrar e decifrar os dados, como na vida real, onde usamos 
a mesma chave para abrir e fechar a porta. A criptografia simétrica é muito mais rápida, mas infelizmente não tão segura. Como existe apenas uma chave, ela 
ficará espalhada pelos clientes (navegadores) e qualquer um, que tem a posse dessa chave, pode decifrar a comunicação. Agora, o interessante é que o HTTPS usa 
ambos os métodos de criptografia, assimétrica e simétrica. No certificado, vem a chave pública para o cliente utilizar. E o servidor continua na posse da chave 
privada. Isso é seguro, mas lento e por isso o cliente gera uma chave simétrica ao vivo. Uma chave só para ele e o servidor com o qual está se comunicando 
naquele momento! Essa chave exclusiva (e simétrica) é então enviada para o servidor utilizando a criptografia assimétrica (chave privada e pública) e então é 
utilizada para o restante da comunicação. Então, HTTPS começa com criptografia assimétrica para depois mudar para criptografia simétrica. Essa chave simétrica 
será gerada no início da comunicação e será reaproveitada nas requisições seguintes. Bem-vindo ao mundo fantástico do HTTPS :)
Nas requisições HTTP, uma requisição sempre deve ser enviada com todas as informações necessárias, o que faz uma requisição ser sempre independente das demais.
Uma comunicação com HTTP sempre é iniciada pelo cliente que manda uma requisição ao servidor esperando por uma resposta.
Uma sessão HTTP nada mais é que um tempo que o cliente permanece ativo no sistema! Isso é parecido com uma sessão no cinema. Uma sessão, nesse contexto, é o 
tempo que o cliente usa a sala no cinema para assistir a um filme. Quando você sai da sala, termina a sessão. Ou seja, quando você se desloga, a Alura termina a 
sua sessão.


GET  - Lembrando que o método define a ação ou intenção da requisição HTTP (GET é igual a receber). O código da resposta dá uma dica ao cliente se a requisição 
       foi um sucesso ou não, e qual foi o problema em caso de falha. 
POST - Usando o POST, o navegador envia os dados do formulário no corpo da requisição e não na URL! Se fosse um GET, todos os dados seriam enviados através da URL. 
       Como não desejamos que os dados do login e senha apareçam na URL do navegador, foi utilizado um HTTP POST. (O POST, ao contrário do GET, envia os parâmetros 
       no corpo da requisição HTTP, escondendo eles da URI.)

No dia a dia, vocês vão ver códigos usando GET para fazer pesquisas mas também para alterar ou remover algo no servidor. A mesma coisa podemos dizer sobre POST. Vocês 
vão usar o POST para inserir e alterar dados, mas também para pesquisar. As aplicações podem adaptar o significado dos métodos HTTP quando for necessário.

Temos mais métodos como o DELETE e PUT.

Classe 2xx - O código 200 significa que tudo deu certo. 
Classe 3xx - Temos também o código 301. Quando o navegador recebe o status 
             301 ele já sabe que é preciso enviar uma nova requisição e procura a nova URL no cabeçalho de resposta Location, por exemplo, se eu digitar 
             http://buscape.com o site da busca irá me redirecionar para o https://buscape.com e me retornar o código 301.
Classe 4xx - 404 é o código clássico que indica que o recurso não foi encontrado. Em geral, a classe 4xx indica que o cliente errou algo na requisição.
             Segue um outro exemplo da classe 4xx, tente acessar: https://s3.amazonaws.com/caelum-online-public/http/qq.png
             Nesse caso o código de resposta é 403(não permitido): o cliente não tem a permissão.
Classe 5xx - A classe 5xx significa que houve algum problema no servidor.
             Por exemplo: 500 - Internal Server Error, ou outro famoso: 503 - Service Unavailable.
             O código 500 acontece com frequência quando estamos desenvolvendo uma aplicação web e, ao testar, percebemos que erramos algo na lógica que gerou 
             um problema no servidor.

Ver: https://www.webfx.com/web-development/glossary/http-status-codes/
     https://httpstatusdogs.com/
     https://http.cat/

No console podemos ver que aparecem mais requisições (cada linha representa um novo request). Quando o servidor Alura devolve a resposta para o navegador vem o 
conteúdo da página inicial em um formato especial, chamado de HTML. O HTML define a estrutura da nossa página, define os menus, botões, links, rodapé etc. Mas 
dentro do HTML não vêm as imagens e outros arquivos necessários para deixar o site perfeito. Dentro dele vem apenas a URL (endereço) desses outros recursos.
Então, ao receber o HTML, o navegador dispara várias outras requisições para carregar as imagens, fontes e outros dados. Como também são requisições HTTP, o 
console mostra suas informações. Podemos ver que na resposta vem o tipo do conteúdo, por exemplo text/html, text/css, image/svg+xml, entre outros.
O importante é saber que o protocolo HTTP não está preso em algum formato específico. Podemos trafegar qualquer informação com ele, seja texto ou binário!


Parâmetros na URL:
Quando enviamos parâmetros na URL, devemos iniciar pelo ?, o nome do parâmetro e um =, para separar o nome do parâmetro do seu valor 
?nome_do_parametro=seu_valor;
Quando usamos mais do que, um parâmetro devemos usar & para separá-los: ?nome_do_parametro=seu_valor&nome_do_outro_param=valor


O protocolo HTTP envia dados em texto puro e já estudamos sobre as implicações disso em questões de segurança. Vimos inclusive como o HTTPS lida com isso.
Em alguns momentos se faz necessário avisar na própria requisição um formato específico esperado para a resposta.
De que forma podemos especificar o formato que esperamos que seja devolvido?
A resposta correta é usando o cabeçalho Accept.
Accept: text/html, Accept: text/css, Accept: application/xml, Accept: application/json, Accept:image/jpeg e Accept: image/*
Ou Accept: */*

REST - REST é um padrão arquitetural para comunicações entre aplicações
Ver: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types


!curl  = O cURL é um projeto de software de computador que fornece uma biblioteca e uma ferramenta de linha de comando para transferir dados usando vários protocolos .O projeto cURL produz dois produtos, libcurl e cURL. Lançado pela primeira vez em 1997, o nome cURL vem do inglês "Client URL", que significa "URL do cliente"
no terminal:
curl -v <URL> 

========= HTTP/2 ========================================================================================================================
Com o crescimento do número de dispositivos móveis conectados a Web, é cada vez mais importante que a quantidade de dados trafegada seja 
a menor possível, afinal este tipo de dispositivo não costuma ter uma conexão com muita banda larga. O protocolo HTTP/2 traz diversas 
tecnologias para diminuir o tamanho das requisições. (Como compactar os dados utilizando uma tecnologia chamada Gzip) 
(o HTTP/2 possui diversas tecnologias de compactação de sua requisição. Isto acaba sendo muito útil para clientes móveis, visto que a 
maioria das redes mobile ainda não são de grande qualidade.)
Por padrão, no protocolo HTTP versão 1.1 não é necessário o uso da camada de segurança TSL/SSL. Como hoje em dia trafegamos muitos dados 
críticos na Web, como senhas, logins e dados bancários, um protocolo atualizado que faz uso dessa segurança parece quase uma necessidade.
(com o HTTP/2 o uso de HTTPS acaba sendo obrigatório, e esta é uma das grandes vantagens do uso desta nova atualização do protocolo.)

O HPACK é uma tecnologia especializada em comprimir os Headers das comunicações HTTP/2. Como toda requisição HTTP acompanha algum header 
por padrão, uma tecnologia de compressão embutida no protocolo é demasiadamente útil para economizar dados trafegados.

Quando estamos utilizando Headers Stateful (implementado no http/2), simplesmente colocamos nas requisições os cabeçalhos que se alteraram 
entre uma e outra, trazendo uma enorme economia de dados, visto que toda requisição HTTP possui um cabeçalho e que, muitas vezes, no 
HTTP/1.1, cabeçalhos repetidos eram trafegados em todas as requisições.

No http/2 temos também o conceito de Server Push, o servidor pode empurrar para o clientes certos recursos antes mesmo de serem solicitados, 
pois ele consegue analisar o HTML e ver o que mais é preciso para carregar a página fazendo com que não seja necessário gastar tempo pedindo 
todos os outros recursos.

HTTP/2 fica a mais nível de Servidores, os usuários comuns não ficam em muito contato
=========================================================================================================================================

==== Cookies ===========================================================================================================================
Quando falamos de Cookies na verdade queremos dizer Cookies HTTP ou Cookie web. Um cookie é um pequeno arquivo de texto, normalmente criado pela aplicação web, 
para guardar algumas informações sobre usuário no navegador. Quais são essas informações depende um pouco da aplicação. Pode ser que fique gravado alguma 
preferência do usuário. Ou algumas informações sobre as compras na loja virtual ou, como vimos no vídeo, a identificação do usuário. Isso depende da utilidade 
para a aplicação web.
Um cookie pode ser manipulado e até apagado pelo navegador e, quando for salvo no navegador, fica associado com um domínio. Ou seja, podemos ter um cookie para 
www.alura.com.br, e outro para www.caelum.com.br. Aliás, um site ou web app pode ter vários cookies!
Quando enviamos uma requisição HTTP, todos os dados para que ela seja respondida devem ser enviados. Mas e o e-mail e a senha? Quando o login é feito, a Alura 
tem certeza de que um usuário existe e gera uma identificação quase aleatória pra esse usuário. E esse número fica salvo em um arquivo especial, chamado 
cookie, que é gerado e enviado por cada site :)
=========================================================================================================================================


==== Comunicação Peer-to-peer do Torrent ================================================================================================
Você já usou torrent para baixar algum arquivo na internet? Caso sim, aproveitou um outro modelo de comunicação, o P2P ou Peer-To-Peer!
O modelo Cliente-Servidor não é o único modelo de comunicação na rede, nem sempre o mais adequado. Por exemplo, imagine que precisemos 
contar as letras de 20 palavras. No caso do modelo Cliente-Servidor, quem fará esse trabalho é o servidor, certo? E se precisar contar 
as letras de 1 milhão de palavras? Muito trabalhoso para o servidor, não?
O modelo Cliente-Servidor tenta centralizar o trabalho no servidor, mas isso também pode gerar gargalos. Se cada Cliente pudesse ajudar 
no trabalho, ou seja, assumir um pouco da responsabilidade do servidor, seria muito mais rápido. Essa é a ideia do P2P! Não há mais uma 
clara divisão entre Cliente-Servidor, cada cliente também é servidor e vice-versa!
Isto é útil quando você precisa distribuir um trabalho ou necessita baixar algo de vários lugares diferentes. Faz sentido?
Usando algum aplicativo de Torrent, o protocolo utilizado não é o HTTP, e sim o protocolo P2P, como BitTorrent ou Gnutella.
=========================================================================================================================================

==== Web Service ========================================================================================================================
Quando falamos de um Web Service, sempre usamos o protocolo da web, ou seja o HTTP.
Um Web Service disponibiliza uma funcionalidade na web, através do protocolo HTTP. As funcionalidades variam muito e dependem muito da empresa e do negócio 
dela, mas por exemplo, na Alura temos um Web Service que traz todas as informações de um curso (nome, capítulos, exercícios, etc). O Google ou Facebook possuem 
muitos Web Services para acessar um usuário, ver os posts dele, interesses, etc. Muitas vezes esses serviços são pagos.
O importante é que sempre usamos o protocolo HTTP. A grande diferença de um Web Service é que os dados não vem no formato HTML, e sim em algum formato 
independente da visualização, como XML ou JSON.
Temos um pequeno exemplo de um Web Services que usamos em um dos treinamentos presenciais. Tente acessar: http://argentumws.caelum.com.br/negociacoes
Repare que recebemos dados sobre negociações, mas o formato é XML. Isso é um Web Service! É a tarefa do cliente ler os dados e apresentar para o usuário final. 
O cliente não precisa ser o navegador (e normalmente não é), pode ser um celular ou uma aplicação Desktop.
=========================================================================================================================================





