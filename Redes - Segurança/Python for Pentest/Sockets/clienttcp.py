"""
Aqui vamos criar uma cliente TCP
Cliente = Programa que se conecta a um servidor (ex: Web Browser)
Vamos ver como um navegador funciona por trás

!Um socket é definido pela combinação de um endereço IP e uma porta, sendo escrito sob a forma “número IP.número da porta”

The Python interface is a straightforward transliteration of the Unix system call and library interface for sockets to Python's object-oriented style: the socket() function returns a socket object whose methods implement the various socket system calls. Parameter types are somewhat higher-level than in the C interface: as with read() and write() operations on Python files, buffer allocation on receive operations is automatic, and buffer length is implicit on send operations.

https://docs.python.org/3/library/socket.html
"""


import socket
from ping3 import ping
# pip install ping3

print('1 ', socket.gethostname())
print('2 ', socket.gethostbyname('DESKTOP-PJK469H'))
print('3 ', socket.getfqdn())

# Vamos criar uma conexão, para isso usamos socket.socket
# e passamos como argumento o tipo dessa conexão
# socket.AF_INET = conexão IPV4
# socket.SOCK_STREAM = conexão TCP
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# client é nosso objeto
# vamos agora conectar passando um IP e uma porta (para a nossa conexão TCP/IP)

google_ip = socket.gethostbyname("www.google.com")

print('Google ip: ', google_ip)

# Somente conectador com o google, se printarmos o passo abaixo ele retorna None
client.connect((f"{google_ip}", 80))

# Envia alguma informação, porém o protocolo TCP não aceita qualquer tipo de mensagem, então usamos a devtools do navegador para pegar o request no header do http
client.send("GET / HTTP/1.1\nHost: google.com\n\n\n".encode())

# Receve informações, devemos informar a quantidade de bytes que você deseja receber. O código vai continuar rodando enquanto recv não receber os bytes
pacotes_recebidos = client.recv(1024)

print(pacotes_recebidos.decode())

client.close()
